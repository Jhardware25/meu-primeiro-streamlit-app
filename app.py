import streamlit as st
import pandas as pd
import numpy_financial as npf
import plotly.express as px
import base64

# INICIALIZA√á√ÉO GARANTIDA DE VARI√ÅVEIS DE CUSTO
iof_total = 0.0
tac_valor = 0.0
valor_prestamista = 0.0

def format_brl(value):
    """Formata um valor num√©rico para o padr√£o monet√°rio brasileiro (R$ X.XXX,XX)."""
    # Garante duas casas decimais e troca ponto por v√≠rgula e v√≠rgula por ponto
    # Ex: 10000.00 -> '10,000.00' -> '10X000,00' -> '10.000,00'
    return f"R$ {value:,.2f}".replace(",", "X").replace(".", ",").replace("X", ".")

def format_percent(value):
    """Formata um valor num√©rico para o padr√£o percentual brasileiro (X,XX%)."""
    # Formata com duas casas decimais e troca ponto por v√≠rgula
    return f"{value:.2f}".replace(".", ",") + '%'

st.set_page_config(layout="wide")

# Fun√ß√£o para formatar valores em Reais (R$) com padr√£o brasileiro
def format_brl(value):
    try:
        value = float(value)
    except (ValueError, TypeError):
        return "R$ --"
    
    formatted_value = f"{value:,.2f}"
    return f"R$ {formatted_value.replace(',', 'X').replace('.', ',').replace('X', '.')}"


st.title("üí∞ Simulador de Cr√©dito Com Garantia de Aplica√ß√£o Financeira")

# --- ENTRADAS DO USU√ÅRIO ---
st.header("Dados da Opera√ß√£o de Cr√©dito:")

valor_credito = st.number_input(
    "Valor do Cr√©dito (R$):",
    min_value=1000.0,
    value=100000.0,
    step=1000.0,
    format="%.2f"
)
prazo_credito_meses = st.slider(
    "Prazo do Cr√©dito (meses):",
    min_value=1,
    max_value=60,
    value=60,
    step=1
)

taxa_juros_pactuada_input = st.number_input(
    "Taxa de Juros Pactuada do Cr√©dito (% ao m√™s):",
    min_value=0.01,
    value=0.8,
    step=0.01,
    format="%.2f"
)
taxa_juros_pactuada_mensal = taxa_juros_pactuada_input / 100

tipo_taxa_credito = st.radio(
    "Tipo de Taxa do Cr√©dito:",
    ("Prefixada", "P√≥s-fixada (TR + Taxa)"),
    index=0,
    help="Escolha se a taxa do cr√©dito ser√° fixa ou ter√° um componente de TR."
)

taxa_indexador_anual = 0.0
if tipo_taxa_credito == "P√≥s-fixada (TR + Taxa)":
    taxa_indexador_anual = st.number_input(
        "Taxa do Indexador Anual (TR/ano - %):",
        min_value=0.0,
        value=3.0,
        step=0.01,
        format="%.2f",
        help="Taxa do indexador anual (como a TR) que ser√° somada √† taxa pactuada."
    )
    taxa_indexador_mensal = (1 + taxa_indexador_anual / 100)**(1/12) - 1
else:
    taxa_indexador_mensal = 0.0

iof_percentual = st.number_input(
    "IOF Total (% do valor do cr√©dito):",
    min_value=0.0,
    value=0.38,
    step=0.01,
    format="%.2f"
)
tac_percentual = st.number_input(
    "TAC (% do valor do cr√©dito):",
    min_value=0.0,
    value=0.0,
    step=0.01,
    format="%.2f"
)

# --- NOVO BLOCO: SEGURO PRESTAMISTA ---
st.header("Seguro Prestamista:")
opcao_prestamista = st.radio(
    "Incluir Seguro Prestamista?",
    ("N√£o incluir", "Calcular por Percentual", "Informar Valor Manualmente"),
    index=0 # Padr√£o: N√£o incluir
)

percentual_prestamista = 0.0
valor_prestamista = 0.0

if opcao_prestamista == "Calcular por Percentual":
    percentual_prestamista = st.slider(
        "Percentual do Seguro Prestamista (% do valor do cr√©dito):",
        min_value=5.0,
        max_value=10.0,
        value=7.5, # Um valor m√©dio entre 5% e 10%
        step=0.1,
        format="%.1f",
        help="Percentual do seguro prestamista sobre o valor do cr√©dito, ajustado pela idade dos s√≥cios."
    )
    valor_prestamista = valor_credito * (percentual_prestamista / 100)
    st.info(f"Valor do Seguro Prestamista (estimado): **{format_brl(valor_prestamista)}**")
elif opcao_prestamista == "Informar Valor Manualmente":
    valor_prestamista = st.number_input(
        "Valor do Seguro Prestamista (R$):",
        min_value=0.0,
        value=0.0,
        step=100.0,
        format="%.2f"
    )
# --- FIM NOVO BLOCO: SEGURO PRESTAMISTA ---


st.header("Dados da Aplica√ß√£o em Garantia:")
valor_aplicacao = st.number_input(
    "Valor da Aplica√ß√£o em Garantia (R$):",
    min_value=1000.0,
    value=50000.0,
    step=1000.0,
    format="%.2f"
)

taxa_rendimento_aplicacao_input = st.number_input(
    "Taxa de Rendimento da Aplica√ß√£o (% ao m√™s):",
    min_value=0.01,
    max_value=2.0,
    value=0.8,
    step=0.01,
    format="%.2f"
)
taxa_rendimento_aplicacao_mensal = taxa_rendimento_aplicacao_input / 100

ir_aliquota = st.slider(
    "Al√≠quota de Imposto de Renda sobre Rendimento da Aplica√ß√£o (%):",
    min_value=0.0,
    max_value=22.5,
    value=15.0,
    step=0.5,
    format="%.1f",
    help="Al√≠quota de IR para o c√°lculo do rendimento l√≠quido da aplica√ß√£o."
) / 100


# --- BOT√ÉO DE SIMULA√á√ÉO ---
if st.button("Simular Opera√ß√£o", key="btn_simular_operacao"):
   #st.info("DEBUG: Bot√£o 'Simular Opera√ß√£o' clicado e c√≥digo come√ßando a executar!") # Adicione esta linha AQUI

    try:
    # --- IN√çCIO: SE√á√ÉO DE C√ÅLCULOS DA OPERA√á√ÉO DE CR√âDITO E APLICA√á√ÉO ---

    # 1. C√ÅLCULOS INICIAIS
        iof_total = valor_credito * (iof_percentual / 100)

        # --- IN√çCIO DA ALTERA√á√ÉO PARA A TAC ---
        # Calcula o valor da TAC baseado no percentual
        tac_valor_calculado = valor_credito * (tac_percentual / 100)

        # Define o teto m√°ximo para a TAC
        teto_tac = 10000.00

        # Aplica a regra: se o valor calculado for maior que o teto, usa o teto
        tac_valor = min(tac_valor_calculado, teto_tac)

        #st.info(f"DEBUG: IOF Total: {format_brl(iof_total)}")
        #st.info(f"DEBUG: TAC Valor: {format_brl(tac_valor)}")
        #st.info(f"DEBUG: Valor Prestamista: {format_brl(valor_prestamista)}")
        #st.info(f"DEBUG: Total Custos Operacionais: {format_brl(iof_total + tac_valor + valor_prestamista)}")

        # --- FIM DA ALTERA√á√ÉO PARA A TAC ---
        
        # --- L√ìGICA DO SEGURO PRESTAMISTA E OUTROS CUSTOS (IOF, TAC, Prestamista) ---

    # Inicializa o valor que ser√° a base para o c√°lculo das parcelas.
    # Por padr√£o, come√ßa com o valor do cr√©dito solicitado.
        valor_total_para_parcela_calculo = valor_credito 

        # Inicializa o valor l√≠quido que o cliente receber√°.
        # Por padr√£o, come√ßa com o valor do cr√©dito solicitado.
        valor_liquido_recebido = valor_credito

        # Soma todos os custos operacionais (IOF, TAC, Prestamista)
        total_de_custos_operacionais = iof_total + tac_valor + valor_prestamista
        #st.info(f"DEBUG: Total Custos Operacionais: {format_brl(total_de_custos_operacionais)}") # <--- Esta linha de DEBUG vem logo ap√≥s.


        # *** AQUI EST√Å A L√ìGICA DE FINANCIAMENTO/DESCONTO ***
        if tipo_taxa_credito == "Prefixada": 
            # SE √â PREFIXADA: Custos (IOF, TAC, Prestamista) s√£o FINANCIADOS
            
            # 1. Base para as Parcelas: O valor que ser√° parcelado √© o cr√©dito + todos os custos.
            valor_total_para_parcela_calculo += total_de_custos_operacionais 
            
            # 2. Valor L√≠quido Recebido: O cliente recebe o valor do cr√©dito solicitado integralmente.
            #    Os custos s√£o dilu√≠dos nas parcelas, N√ÉO descontados do valor inicial que ele recebe.
            #    valor_liquido_recebido j√° est√° com valor_credito, ent√£o n√£o precisa de ajuste aqui.

        else: # SE √â P√ìS-FIXADA: Custos (IOF, TAC, Prestamista) s√£o DESCONTADOS do valor inicial
            
            # 1. Base para as Parcelas: O valor que ser√° parcelado √© APENAS o valor do cr√©dito.
            #    Os custos foram pagos √† vista, n√£o foram financiados.
            #    valor_total_para_parcela_calculo j√° est√° com valor_credito, ent√£o n√£o precisa de ajuste aqui.
            
            # 2. Valor L√≠quido Recebido: O cliente recebe o cr√©dito MENOS todos os custos.
            valor_liquido_recebido -= total_de_custos_operacionais

        # --- FIM DA L√ìGICA DE FINANCIAMENTO/DESCONTO ---


        # *** PONTO CRUCIAL: Verifique onde as parcelas s√£o calculadas! ***
        # A fun√ß√£o ou o loop que calcula as parcelas (ex: calcular_amortizacao(valor_principal, ...))
        # deve OBRIGATORIAMENTE usar 'valor_total_para_parcela_calculo' como o valor principal,
        # e N√ÉO 'valor_credito' diretamente.
        # Exemplo:
        # tabela_amortizacao = calcular_amortizacao(valor_total_para_parcela_calculo, ...)

        #st.info(f"DEBUG: Tipo Taxa Cr√©dito: {tipo_taxa_credito}")
        #st.info(f"DEBUG: Valor Total para Parcela (AP√ìS L√ìGICA DE FINANCIAMENTO): {format_brl(valor_total_para_parcela_calculo)}")
        #st.info(f"DEBUG: Valor L√≠quido Recebido (AP√ìS L√ìGICA DE FINANCIAMENTO): {format_brl(valor_liquido_recebido)}")

                # 2. C√ÅLCULO DA TAXA DE JUROS EFETIVA DO CR√âDITO
        if tipo_taxa_credito == "P√≥s-fixada (TR + Taxa)":
                    taxa_juros_credito_efetiva_mensal = taxa_juros_pactuada_mensal + taxa_indexador_mensal
        else:
                    taxa_juros_credito_efetiva_mensal = taxa_juros_pactuada_mensal
        #st.info(f"DEBUG: Taxa Juros Cr√©dito Efetiva Mensal: {format_percent(taxa_juros_credito_efetiva_mensal * 100)}")
            
                
                # 3. C√ÅLCULO DA PARCELA MENSAL E JUROS TOTAIS (BASE TABLE PRICE)
        if prazo_credito_meses == 0:
                    parcela_mensal_credito = 0.0
                    total_juros_pagos_credito = 0.0
        else:
                    try:
                        parcela_mensal_credito = npf.pmt(
                            taxa_juros_credito_efetiva_mensal,
                            prazo_credito_meses,
                            -valor_total_para_parcela_calculo # Usa o valor ajustado para c√°lculo da parcela
                        )
                        total_juros_pagos_credito = (parcela_mensal_credito * prazo_credito_meses) - valor_total_para_parcela_calculo
                    except Exception as e:
                        st.error(f"Erro no c√°lculo da parcela do cr√©dito: {e}. Verifique as taxas e prazos.")
                        parcela_mensal_credito = 0.0
                        total_juros_pagos_credito = 0.0
        #st.info(f"DEBUG: Parcela Mensal Cr√©dito: {format_brl(parcela_mensal_credito)}")
        #st.info(f"DEBUG: Total Juros Pagos Cr√©dito: {format_brl(total_juros_pagos_credito)}")
                

                # 4. C√ÅLCULOS DA APLICA√á√ÉO
        rendimento_bruto_total_aplicacao = valor_aplicacao * ((1 + taxa_rendimento_aplicacao_mensal)**prazo_credito_meses - 1)
        ir_total_aplicacao = rendimento_bruto_total_aplicacao * ir_aliquota
        rendimento_liquido_total_aplicacao = rendimento_bruto_total_aplicacao - ir_total_aplicacao
        capital_total_acumulado_aplicacao = valor_aplicacao + rendimento_liquido_total_aplicacao
        #st.info(f"DEBUG: Rendimento L√≠quido Total Aplica√ß√£o: {format_brl(rendimento_liquido_total_aplicacao)}")

                # 5. C√ÅLCULO DO GANHO L√çQUIDO TOTAL
        ganho_liquido_total_operacao = rendimento_liquido_total_aplicacao - total_juros_pagos_credito

                # 6. C√ÅLCULO DO CET (Custo Efetivo Total)
                # Fluxo de caixa para o c√°lculo do CET deve incluir TODOS os custos iniciais e as parcelas
                # O valor_liquido_recebido j√° reflete os custos iniciais (IOF, TAC, Prestamista).
        fluxo_caixa_cet_cliente = [valor_liquido_recebido] + [-parcela_mensal_credito] * prazo_credito_meses

        try:
                    cet_mensal = npf.irr(fluxo_caixa_cet_cliente)
                    cet_anual = ((1 + cet_mensal)**12 - 1) * 100 # Em % ao ano
        except Exception:
                    cet_anual = float('nan') # Usar NaN para indicar que n√£o foi poss√≠vel calcular
        #st.info(f"DEBUG: CET Anual: {f'{format_percent(cet_anual)} a.a.' if not pd.isna(cet_anual) else 'N√£o Calculado'}")        

                # 7. GERA√á√ÉO DOS DADOS MENSAIS PARA OS GR√ÅFICOS
        historico = []
        
        saldo_atual_credito = valor_total_para_parcela_calculo # <-- USE AQUI O VALOR AJUSTADO
        saldo_atual_aplicacao = valor_aplicacao

        for mes_idx in range(1, prazo_credito_meses + 1):
                    # Cr√©dito
                    juros_mes_credito = saldo_atual_credito * taxa_juros_credito_efetiva_mensal
                    amortizacao_mes = parcela_mensal_credito - juros_mes_credito
                    
                    saldo_atual_credito = max(0, saldo_atual_credito - amortizacao_mes)

                    # Aplica√ß√£o
                    rendimento_mes_bruto = saldo_atual_aplicacao * taxa_rendimento_aplicacao_mensal
                    saldo_atual_aplicacao += rendimento_mes_bruto

                    historico.append({
                        'M√™s': mes_idx,
                        'Saldo Devedor Credito (R$)': saldo_atual_credito,
                        'Parcela Mensal Credito (R$)': parcela_mensal_credito,
                        'Rendimento Liquido Mensal da Aplicacao': rendimento_mes_bruto * (1 - ir_aliquota),
                        'Saldo da Aplicacao Garantia': saldo_atual_aplicacao
                    })

        df_evolucao = pd.DataFrame(historico)
        df_fluxo_mensal = pd.DataFrame(historico)

        st.info(f"DEBUG: df_evolucao est√° vazia? {df_evolucao.empty}")
        st.info(f"DEBUG: df_evolucao.head(): {df_evolucao.head().to_string()}") # Mostra as primeiras linhas do DataFrame
        st.info(f"DEBUG: df_fluxo_mensal est√° vazia? {df_fluxo_mensal.empty}")
        st.dataframe(df_evolucao.head())
        st.dataframe(df_fluxo_mensal.head())
        
                # --- FIM DA SE√á√ÉO DE C√ÅLCULOS ---


                # --- IN√çCIO: SE√á√ÉO DE EXIBI√á√ÉO DOS RESULTADOS ---
        st.header("Resultados da Simula√ß√£o:")
        #st.info("DEBUG: Iniciando exibi√ß√£o dos resultados...")

        st.subheader("Resumo Financeiro da Opera√ß√£o:")
        col1, col2, col3 = st.columns(3)
                    
        with col1:    
                            st.metric("Valor L√≠quido Recebido", format_brl(valor_liquido_recebido))
                            st.metric("Parcela Mensal do Cr√©dito", format_brl(parcela_mensal_credito))
                            st.metric("Total de Juros Pagos no Cr√©dito", format_brl(total_juros_pagos_credito))

        with col2:
                            st.metric("Rendimento Bruto Total da Aplica√ß√£o", format_brl(rendimento_bruto_total_aplicacao))
                            st.metric("Imposto de Renda Retido", format_brl(ir_total_aplicacao))
                            st.metric("Rendimento L√≠quido Total", format_brl(rendimento_liquido_total_aplicacao))

        with col3:
                            st.metric("Ganho L√≠quido Total da Opera√ß√£o", format_brl(ganho_liquido_total_operacao))
                            if not pd.isna(cet_anual): # S√≥ exibe se o CET foi calculado
                                st.metric("Custo Efetivo Total (CET) Anual",f"{format_percent(cet_anual)} a.a.")
                                
                            else: 
                                st.metric("Custo Efetivo Total (CET) Anual", "N√£o Calculado")


        st.subheader("Resumo Financeiro Detalhado:")
        st.write(f"- **Juros Totais Pagos no Cr√©dito:** {format_brl(total_juros_pagos_credito)}")
        st.write(f"- **Rendimento Bruto Total da Aplica√ß√£o:** {format_brl(rendimento_bruto_total_aplicacao)}")
        st.write(f"- **Imposto de Renda Retido na Aplica√ß√£o:** {format_brl(ir_total_aplicacao)}")
        st.write(f"- **Rendimento L√≠quido Total da Aplica√ß√£o:** {format_brl(rendimento_liquido_total_aplicacao)}")
        st.write(f"- **Capital Total Acumulado ao Final do Contrato:** **{format_brl(capital_total_acumulado_aplicacao)}**")
        st.write(f"- **Ganho L√≠quido Total da Opera√ß√£o (Rendimento L√≠quido - Juros Pagos):** **{format_brl(ganho_liquido_total_operacao)}**")
        st.write(f"- **Tarifa de Abertura de Cr√©dito (TAC):** {format_brl(tac_valor)}")
                    
                    # Adiciona o seguro prestamista no resumo detalhado
        if valor_prestamista > 0:
                    st.write(f"- **Seguro Prestamista:** {format_brl(valor_prestamista)}")
                    
                    if not pd.isna(cet_anual):
                        st.write(f"- **Custo Efetivo Total (CET):** {format_percent(cet_anual)} a.a.")
                    else:
                        st.write("- **Custo Efetivo Total (CET) Anual:** N√£o foi poss√≠vel calcular. Verifique os par√¢metros da opera√ß√£o.")


                # L√≥gica da Mensagem Final

        if ganho_liquido_total_operacao >= 0:
                    st.success("üéâ Esta opera√ß√£o de cr√©dito, considerando o rendimento da sua aplica√ß√£o, resulta em um **ganho l√≠quido total** para voc√™!")
                    st.info(f"""
                        üí° Voc√™ n√£o apenas cobriu os juros e custos do cr√©dito com sua aplica√ß√£o, como tamb√©m obteve um **ganho de {format_brl(ganho_liquido_total_operacao)}**!
                        Isso demonstra a **vantagem de usar sua aplica√ß√£o como garantia** para otimizar seus custos de cr√©dito ao m√°ximo.
                        """)
        
        else:
                    st.warning("‚ö†Ô∏è Esta opera√ß√£o de cr√©dito, mesmo com o rendimento da sua aplica√ß√£o, resulta em um **custo l√≠quido total**.")
                    st.info("O rendimento gerado pela sua aplica√ß√£o foi crucial! Ele cobriu parte dos juros do seu cr√©dito, resultando em uma redu√ß√£o significativa no valor final que voc√™ pagou.")


                    # --- Exibi√ß√£o dos Gr√°ficos ---
                    st.subheader("üìä Evolu√ß√£o Financeira ao Longo do Contrato")
                    if not df_evolucao.empty:
                        fig_saldo = px.line(df_evolucao, x="M√™s", y=["Saldo Devedor Credito", "Saldo Aplicacao Garantia"])
                        title='Evolu√ß√£o do Saldo Devedor do Cr√©dito vs. Saldo da Aplica√ß√£o em Garantia',
                        labels={
                        "value": "Valor (R$)",
                                "variable": "Ativo"
                            },
                        line_shape="spline",
                        height=400
                                            
                        fig_saldo.update_layout(hovermode="x unified", legend_title_text='Tipo')
                        fig_saldo.update_xaxes(showgrid=True, zeroline=True)
                        fig_saldo.update_yaxes(showgrid=True, zeroline=True)
                        st.plotly_chart(fig_saldo, use_container_width=True)
                    else:
                        st.info("N√£o √© poss√≠vel gerar gr√°ficos para um prazo de contrato de 0 meses.")

                    if not df_fluxo_mensal.empty:
                        fig_fluxo = px.bar(df_fluxo_mensal, x='M√™s', y=['Parcela Mensal do Cr√©dito (R$)', 'Rendimento L√≠quido Mensal da Aplica√ß√£o (R$)'],
                                            title='Parcela Mensal do Cr√©dito vs. Rendimento L√≠quido Mensal da Aplica√ß√£o',
                                            labels={
                                                "value": "Valor (R$)",
                                                "variable": "Tipo de Fluxo"
                                            },
                                            barmode='group',
                                            height=400,
                                            color_discrete_map={
                                                'Parcela Mensal do Cr√©dito (R$)': 'red',
                                                'Rendimento L√≠quido Mensal da Aplica√ß√£o (R$)': 'green'
                                            }
                                        )
                        fig_fluxo.update_layout(hovermode="x unified", legend_title_text='Fluxo')
                        fig_fluxo.update_xaxes(showgrid=True, zeroline=True)
                        fig_fluxo.update_yaxes(showgrid=True, zeroline=True)
                        st.plotly_chart(fig_fluxo, use_container_width=True)

                # --- NOVO BLOCO: GERAR RELAT√ìRIO PDF ---
                # ... (c√≥digo antes do bot√£o "Download Relat√≥rio PDF") ...

            

            # ... (restante do seu app.py) ...

                # st.subheader("Gerar Relat√≥rio Detalhado")
            # st.info("Status Atual: Pronto para gerar PDF. Clique no bot√£o.") # Mensagem de status inicial

            # if st.button("Download Relat√≥rio PDF", key="btn_download_pdf"):
            #     st.info("Status Atual: Bot√£o clicado. Iniciando tentativa de gera√ß√£o de PDF...") # Confirma clique
            #     try:
            #         from fpdf import FPDF

            #         pdf = FPDF() 
            #         pdf.add_page()

            #         # --- Tenta adicionar a fonte Noto Sans com tratamento de erro mais espec√≠fico ---
            #         try:
            #             pdf.add_font('NotoSans', '', 'NotoSans-Regular.ttf', uni=True)
            #             pdf.set_font('NotoSans', '', 12)
            #             st.success("Status Atual: Fonte 'NotoSans' carregada com sucesso!") 
            #         except Exception as font_error:
            #             st.error(f"‚ùå Erro CR√çTICO ao carregar a fonte: {font_error}")
            #             st.exception(font_error)
            #             st.warning("O PDF n√£o pode ser gerado sem a fonte. Verifique o nome do arquivo da fonte e se ele est√° no GitHub.")
            #             st.stop()

            #         # --- Conte√∫do do PDF de teste ---
            #         pdf.cell(0, 10, 'Ol√°, este √© um PDF de teste gerado pelo Streamlit!', 0, 1, 'C')
            #         pdf.cell(0, 10, 'Se voc√™ conseguir baixar, o fpdf2 est√° funcionando.', 0, 1, 'C')

            #         pdf_output_bytes = pdf.output(dest='S').encode('latin-1')
            #         st.success(f"Status Atual: PDF gerado como bytes. Tamanho: {len(pdf_output_bytes)} bytes.") 

            #         # --- Tenta com st.download_button ---
            #         st.download_button(
            #             label="Clique para Baixar o PDF (Bot√£o Streamlit)",
            #             data=pdf_output_bytes,
            #             file_name="teste_pdf_streamlit.pdf",
            #             mime="application/pdf"
            #         )
            #         st.info("Status Atual: Bot√£o de download do Streamlit criado.")

            #         # --- Tenta com link Base64 (Alternativo) ---
            #         b64_pdf = base64.b64encode(pdf_output_bytes).decode('latin-1')
            #         href = f'<a href="data:application/pdf;base64,{b64_pdf}" download="teste_pdf_base64.pdf">Clique para Baixar o PDF (Link Alternativo - Mais confi√°vel)</a>'
            #         st.markdown(href, unsafe_allow_html=True)
            #         st.info("Status Atual: Link de download alternativo criado.")

            #     except Exception as e:
            #         st.error("‚ùå Ocorreu um erro INESPERADO ao gerar o PDF!")
            #         st.exception(e)
            #         st.warning("Isso indica um problema mais fundamental. Por favor, entre em contato com o suporte ou verifique a aba 'Activity' no Streamlit Cloud.")

            #     st.success("Status: Processo de gera√ß√£o de PDF finalizado.")
        #st.success("DEBUG: Simula√ß√£o conclu√≠da com sucesso! (Mensagem final)")
        
    except Exception as e: # <--- ADICIONE ESTE BLOCO AQUI, ALINHADO COM O 'try:'
                st.error(f"Ocorreu um erro durante a simula√ß√£o: {e}")
                st.warning("Por favor, verifique os dados inseridos e tente novamente.")    

                # --- FIM DO BLOCO if st.button ---
                st.markdown("---")
                st.subheader("Observa√ß√µes Importantes:")
                st.write("""
                - Os c√°lculos s√£o baseados na **Tabela Price** para o cr√©dito.
                - O rendimento da aplica√ß√£o √© calculado com **juros compostos mensais**.
                - O **Imposto de Renda (IR)** na aplica√ß√£o √© aplicado sobre o rendimento bruto total ao final do per√≠odo, conforme a al√≠quota informada.
                - A **TR (Taxa Referencial)** √© uma taxa de juros que pode variar. Para simula√ß√µes futuras, considere que seu valor pode mudar.
                - Esta √© apenas uma simula√ß√£o e os valores reais podem variar. Consulte sempre um profissional financeiro.
                """)
            