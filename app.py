import streamlit as st
import pandas as pd
import numpy_financial as npf # Certifique-se de que numpy-financial est√° instalado: pip install numpy-financial
import plotly.express as px

# Fun√ß√£o para formatar valores em Reais (R$) com padr√£o brasileiro
def format_brl(value):
    # Garante que o valor seja um n√∫mero
    try:
        value = float(value)
    except (ValueError, TypeError):
        return "R$ --" # Ou outra mensagem de erro

    # Formata o n√∫mero com 2 casas decimais e separador de milhares americano (ponto como decimal)
    formatted_value = f"{value:,.2f}"

    # Inverte os separadores para o padr√£o brasileiro (v√≠rgula como decimal, ponto como milhar)
    # 1. Troca v√≠rgulas por um caractere tempor√°rio (ex: 'X')
    # 2. Troca pontos por v√≠rgulas
    # 3. Troca o caractere tempor√°rio por pontos
    return f"R$ {formatted_value.replace(',', 'X').replace('.', ',').replace('X', '.')}"

st.set_page_config(layout="wide")

st.title("üí∞ Simulador de Cr√©dito com Garantia de Aplica√ß√£o")

# --- ENTRADAS DO USU√ÅRIO ---
st.header("Dados da Opera√ß√£o de Cr√©dito:")

valor_credito = st.number_input(
    "Valor do Cr√©dito (R$):",
    min_value=1000.0,
    value=100000.0,
    step=1000.0,
    format="%.2f"
)
# Prazo m√°ximo limitado a 60 meses
prazo_credito_meses = st.slider(
    "Prazo do Cr√©dito (meses):",
    min_value=1,
    max_value=60, # Prazo m√°ximo alterado para 60 meses
    value=60,
    step=1
)

taxa_juros_pactuada_input = st.number_input(
    "Taxa de Juros Pactuada do Cr√©dito (% ao m√™s):",
    min_value=0.01,
    value=0.8,
    step=0.01,
    format="%.2f"
)
taxa_juros_pactuada_mensal = taxa_juros_pactuada_input / 100

tipo_taxa_credito = st.radio(
    "Tipo de Taxa do Cr√©dito:",
    ("Prefixada", "P√≥s-fixada (TR + Taxa)"),
    index=0,
    help="Escolha se a taxa do cr√©dito ser√° fixa ou ter√° um componente de TR."
)

taxa_indexador_anual = 0.0
if tipo_taxa_credito == "P√≥s-fixada (TR + Taxa)":
    taxa_indexador_anual = st.number_input(
        "Taxa do Indexador Anual (TR/ano - %):",
        min_value=0.0,
        value=3.0,
        step=0.01,
        format="%.2f",
        help="Taxa do indexador anual (como a TR) que ser√° somada √† taxa pactuada."
    )
    taxa_indexador_mensal = (1 + taxa_indexador_anual / 100)**(1/12) - 1
else:
    taxa_indexador_mensal = 0.0

iof_percentual = st.number_input(
    "IOF Total (% do valor do cr√©dito):",
    min_value=0.0,
    value=0.38,
    step=0.01,
    format="%.2f"
)
tac_percentual = st.number_input(
    "TAC (% do valor do cr√©dito):",
    min_value=0.0,
    value=0.0,
    step=0.01,
    format="%.2f"
)

st.header("Dados da Aplica√ß√£o em Garantia:")
valor_aplicacao = st.number_input(
    "Valor da Aplica√ß√£o em Garantia (R$):",
    min_value=1000.0,
    value=50000.0,
    step=1000.0,
    format="%.2f"
)

taxa_rendimento_aplicacao_input = st.number_input(
    "Taxa de Rendimento da Aplica√ß√£o (% ao m√™s):",
    min_value=0.01,
    max_value=2.0,
    value=0.8,
    step=0.01,
    format="%.2f"
)
taxa_rendimento_aplicacao_mensal = taxa_rendimento_aplicacao_input / 100

ir_aliquota = st.slider(
    "Al√≠quota de Imposto de Renda sobre Rendimento da Aplica√ß√£o (%):",
    min_value=0.0,
    max_value=22.5,
    value=15.0,
    step=0.5,
    format="%.1f",
    help="Al√≠quota de IR para o c√°lculo do rendimento l√≠quido da aplica√ß√£o."
) / 100


# --- BOT√ÉO DE SIMULA√á√ÉO ---
if st.button("Simular Opera√ß√£o", key="btn_simular_operacao"):
    # --- IN√çCIO: SE√á√ÉO DE C√ÅLCULOS DA OPERA√á√ÉO DE CR√âDITO E APLICA√á√ÉO ---

    # 1. C√ÅLCULOS INICIAIS
    iof_total = valor_credito * (iof_percentual / 100)
    tac_valor = valor_credito * (tac_percentual / 100)
    valor_liquido_recebido = valor_credito - iof_total - tac_valor

    # 2. C√ÅLCULO DA TAXA DE JUROS EFETIVA DO CR√âDITO
    if tipo_taxa_credito == "P√≥s-fixada (TR + Taxa)":
        taxa_juros_credito_efetiva_mensal = taxa_juros_pactuada_mensal + taxa_indexador_mensal
    else:
        taxa_juros_credito_efetiva_mensal = taxa_juros_pactuada_mensal
    
    # 3. C√ÅLCULO DA PARCELA MENSAL E JUROS TOTAIS (BASE TABLE PRICE)
    if prazo_credito_meses == 0:
        parcela_mensal_credito = 0.0
        total_juros_pagos_credito = 0.0
    else:
        try:
            parcela_mensal_credito = npf.pmt(
                taxa_juros_credito_efetiva_mensal,
                prazo_credito_meses,
                -valor_credito
            )
            total_juros_pagos_credito = (parcela_mensal_credito * prazo_credito_meses) - valor_credito
        except Exception as e:
            st.error(f"Erro no c√°lculo da parcela do cr√©dito: {e}. Verifique as taxas e prazos.")
            parcela_mensal_credito = 0.0
            total_juros_pagos_credito = 0.0

    # 4. C√ÅLCULOS DA APLICA√á√ÉO
    rendimento_bruto_total_aplicacao = valor_aplicacao * ((1 + taxa_rendimento_aplicacao_mensal)**prazo_credito_meses - 1)
    ir_total_aplicacao = rendimento_bruto_total_aplicacao * ir_aliquota
    rendimento_liquido_total_aplicacao = rendimento_bruto_total_aplicacao - ir_total_aplicacao
    capital_total_acumulado_aplicacao = valor_aplicacao + rendimento_liquido_total_aplicacao

    # 5. C√ÅLCULO DO GANHO L√çQUIDO TOTAL
    ganho_liquido_total_operacao = rendimento_liquido_total_aplicacao - total_juros_pagos_credito

    # 6. GERA√á√ÉO DOS DADOS MENSAIS PARA OS GR√ÅFICOS
    historico = []
    saldo_atual_credito = valor_credito
    saldo_atual_aplicacao = valor_aplicacao

    for mes_idx in range(1, prazo_credito_meses + 1):
        # Cr√©dito
        juros_mes_credito = saldo_atual_credito * taxa_juros_credito_efetiva_mensal
        amortizacao_mes = parcela_mensal_credito - juros_mes_credito
        saldo_atual_credito -= amortizacao_mes

        # Aplica√ß√£o
        rendimento_mes_bruto = saldo_atual_aplicacao * taxa_rendimento_aplicacao_mensal
        saldo_atual_aplicacao += rendimento_mes_bruto

        historico.append({
            'M√™s': mes_idx,
            'Saldo Devedor do Cr√©dito (R$)': max(0, saldo_atual_credito),
            'Parcela Mensal do Cr√©dito (R$)': parcela_mensal_credito,
            'Rendimento L√≠quido Mensal da Aplica√ß√£o (R$)': rendimento_mes_bruto * (1 - ir_aliquota),
            'Saldo da Aplica√ß√£o em Garantia (R$)': saldo_atual_aplicacao
        })

    df_evolucao = pd.DataFrame(historico)
    df_fluxo_mensal = pd.DataFrame(historico)

    # --- FIM DA SE√á√ÉO DE C√ÅLCULOS ---


    # --- IN√çCIO: SE√á√ÉO DE EXIBI√á√ÉO DOS RESULTADOS ---
    st.header("Resultados da Simula√ß√£o:")

    st.subheader("Resumo Financeiro da Opera√ß√£o:")
    col1, col2, col3 = st.columns(3)
    with col1:
        # Altera√ß√£o aqui: usando locale.currency
        st.metric("Valor L√≠quido Recebido", format_brl(valor_liquido_recebido, grouping=True))
        st.metric("Parcela Mensal do Cr√©dito", format_brl(parcela_mensal_credito, grouping=True))
        st.metric("Total de Juros Pagos no Cr√©dito", format_brl(total_juros_pagos_credito, grouping=True))

    with col2:
        st.metric("Rendimento Bruto Total da Aplica√ß√£o", format_brl(rendimento_bruto_total_aplicacao, grouping=True))
        st.metric("Imposto de Renda Retido", format_brl(ir_total_aplicacao, grouping=True))
        st.metric("Rendimento L√≠quido Total", format_brl(rendimento_liquido_total_aplicacao, grouping=True))

    with col3:
        st.metric("Ganho L√≠quido Total da Opera√ß√£o", format_brl(ganho_liquido_total_operacao, grouping=True))

    st.subheader("Resumo Financeiro Detalhado:")
    # Altera√ß√£o aqui: usando locale.currency
    st.write(f"- **Juros Totais Pagos no Cr√©dito:** {format_brl(total_juros_pagos_credito, grouping=True)}")
    st.write(f"- **Rendimento Bruto Total da Aplica√ß√£o:** {format_brl(rendimento_bruto_total_aplicacao, grouping=True)}")
    st.write(f"- **Imposto de Renda Retido na Aplica√ß√£o:** {format_brl(ir_total_aplicacao, grouping=True)}")
    st.write(f"- **Rendimento L√≠quido Total da Aplica√ß√£o:** {format_brl(rendimento_liquido_total_aplicacao, grouping=True)}")
    st.write(f"- **Capital Total Acumulado ao Final do Contrato:** **{format_brl(capital_total_acumulado_aplicacao, grouping=True)}**")
    st.write(f"- **Ganho L√≠quido Total da Opera√ß√£o (Rendimento L√≠quido - Juros Pagos):** **{format_brl(ganho_liquido_total_operacao, grouping=True)}**")
    # L√≥gica da Mensagem Final
    if ganho_liquido_total_operacao >= 0:
        st.success("üéâ Esta opera√ß√£o de cr√©dito, considerando o rendimento da sua aplica√ß√£o, resulta em um **ganho l√≠quido total** para voc√™!")
        st.info(f"""
        üí° Voc√™ n√£o apenas cobriu os juros e custos do cr√©dito com sua aplica√ß√£o, como tamb√©m obteve um **ganho de R$ {ganho_liquido_total_operacao:,.2f}**!
        Isso demonstra a **vantagem de usar sua aplica√ß√£o como garantia** para otimizar seus custos de cr√©dito ao m√°ximo.
        """)
    else:
        st.warning("‚ö†Ô∏è Esta opera√ß√£o de cr√©dito, mesmo com o rendimento da sua aplica√ß√£o, resulta em um **custo l√≠quido total**.")
        st.info("O rendimento gerado pela sua aplica√ß√£o foi crucial! Ele cobriu parte dos juros do seu cr√©dito, resultando em uma redu√ß√£o significativa no valor final que voc√™ pagou.")


    # --- Exibi√ß√£o dos Gr√°ficos ---
    st.subheader("üìä Evolu√ß√£o Financeira ao Longo do Contrato")
    # Verifica√ß√£o se os DataFrames n√£o est√£o vazios para evitar erros de Plotly
    if not df_evolucao.empty:
        fig_saldo = px.line(df_evolucao, x='M√™s', y=['Saldo Devedor do Cr√©dito (R$)', 'Saldo da Aplica√ß√£o em Garantia (R$)'],
                            title='Evolu√ß√£o do Saldo Devedor do Cr√©dito vs. Saldo da Aplica√ß√£o em Garantia',
                            labels={
                                "value": "Valor (R$)",
                                "variable": "Ativo"
                            },
                            line_shape="spline",
                            height=400
                            )
        fig_saldo.update_layout(hovermode="x unified", legend_title_text='Tipo')
        fig_saldo.update_xaxes(showgrid=True, zeroline=True)
        fig_saldo.update_yaxes(showgrid=True, zeroline=True)
        st.plotly_chart(fig_saldo, use_container_width=True)
    else:
        st.info("N√£o √© poss√≠vel gerar gr√°ficos para um prazo de contrato de 0 meses.")

    if not df_fluxo_mensal.empty:
        fig_fluxo = px.bar(df_fluxo_mensal, x='M√™s', y=['Parcela Mensal do Cr√©dito (R$)', 'Rendimento L√≠quido Mensal da Aplica√ß√£o (R$)'],
                            title='Parcela Mensal do Cr√©dito vs. Rendimento L√≠quido Mensal da Aplica√ß√£o',
                            labels={
                                "value": "Valor (R$)",
                                "variable": "Tipo de Fluxo"
                            },
                            barmode='group',
                            height=400,
                            color_discrete_map={
                                'Parcela Mensal do Cr√©dito (R$)': 'red',
                                'Rendimento L√≠quido Mensal da Aplica√ß√£o (R$)': 'green'
                            }
                        )
        fig_fluxo.update_layout(hovermode="x unified", legend_title_text='Fluxo')
        fig_fluxo.update_xaxes(showgrid=True, zeroline=True)
        fig_fluxo.update_yaxes(showgrid=True, zeroline=True)
        st.plotly_chart(fig_fluxo, use_container_width=True)

    # --- FIM DA SE√á√ÉO DE EXIBI√á√ÉO DOS RESULTADOS ---

    st.markdown("---")
    st.subheader("Observa√ß√µes Importantes:")
    st.write("""
    - Os c√°lculos s√£o baseados na **Tabela Price** para o cr√©dito.
    - O rendimento da aplica√ß√£o √© calculado com **juros compostos mensais**.
    - O **Imposto de Renda (IR)** na aplica√ß√£o √© aplicado sobre o rendimento bruto total ao final do per√≠odo, conforme a al√≠quota informada.
    - A **TR (Taxa Referencial)** √© uma taxa de juros que pode variar. Para simula√ß√µes futuras, considere que seu valor pode mudar.
    - Esta √© uma simula√ß√£o e os valores reais podem variar. Consulte sempre um profissional financeiro.
    """)

# --- FIM DO BLOCO if st.button ---